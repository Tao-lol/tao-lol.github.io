<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[设计原则]]></title>
      <url>/2019/09/03/DesignPrinciples/</url>
      <content type="html"><![CDATA[<blockquote>
<p>第一篇：<a href="https://www.cnblogs.com/shoshana-kong/p/8847893.html" target="_blank" rel="noopener">https://www.cnblogs.com/shoshana-kong/p/8847893.html</a><br>第二篇：<a href="https://www.cnblogs.com/www-zsl187-com/p/8821885.html" target="_blank" rel="noopener">https://www.cnblogs.com/www-zsl187-com/p/8821885.html</a>  </p>
</blockquote>
<p>1、开放 - 封闭原则 ( Open-Closed Principle, OCP )<br>&emsp;&emsp;通俗：对扩展开发，对修改关闭<br>2、单一职责原则 ( Single Responsibility Principle )<br>&emsp;&emsp;通俗：一个类只做一件事<br>3、里氏替换原则 ( Liskov Substitution Principle )<br>&emsp;&emsp;通俗：子类不能去修改父类的功能<br>4、迪米特法则 / 最少知识原则 ( Law Of Demeter )<br>&emsp;&emsp;通俗：高内聚，低耦合<br>5、依赖倒置原则 ( Dependence Inversion Principle )<br>&emsp;&emsp;通俗：类似 IOC，采用接口编程<br>6、接口隔离原则 ( Interface Segregation Principle )<br>&emsp;&emsp;通俗：细节接口<br>7、合成 / 聚合原则 ( Composite / Aggregate Reuse Principle, CARP )<br>&emsp;&emsp;通俗：避免使用继承  </p>
<a id="more"></a>

<h1 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h1><p>&emsp;&emsp;开放-封闭原则具有理想主义的色彩，他是面向对象设计的终极目标。其他几条则可以看做是开放-封闭原则的实现方法。设计模式就是实现了这些原则，从而达到了代码复用，增加可维护性的目的。  </p>
<h2 id="一-开放-封闭原则"><a href="#一-开放-封闭原则" class="headerlink" title="一.开放 - 封闭原则"></a>一.开放 - 封闭原则</h2><p>&emsp;&emsp;概念：一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改关闭</strong>。模块应该尽量在不修改原代码的情况下进行扩展。<br>　　在软件周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给代码引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。当软件需求变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有代码来实现变化。<br>　　开放封闭原则是面向对象设计的核心所在，遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是<strong>可维护、可扩展、可复用、灵活性好</strong>。开发人员应该仅对程序中呈现的频繁变化的那些部分作出抽象，然而，对于应用程序中的每个部分都刻意的进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。<br>　　注意事项：<br>　　1. 通过接口或者抽象类约束扩展，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的 public 方法。<br>　　2. 参数类型、引用对象尽量使用接口或者抽象类，而不是实现类<br>　　3. 抽象层尽量保持稳定，一旦确定不允许修改。  </p>
<h2 id="二-单一职责原则"><a href="#二-单一职责原则" class="headerlink" title="二.单一职责原则"></a>二.单一职责原则</h2><p>&emsp;&emsp;概念：<strong>就一个类而言，应该仅有一个引起它变化的原因</strong>。<br>　　当我们在做编程的时候，很自然地会一个一个类加上各种各样的功能。这样意味着，<strong>无论任何需求要来，你都需要更改这个类</strong>，这样其实是很糟糕的，维护麻烦，复用不可能，也缺乏灵活性。如果一个类承担的职责过多，就等于把这些职责耦合起来，一个职责变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭到很多意想不到的破坏。  </p>
<h2 id="三-依赖倒转原则"><a href="#三-依赖倒转原则" class="headerlink" title="三.依赖倒转原则"></a>三.依赖倒转原则</h2><p>&emsp;&emsp;概念：依赖倒转原则是程序要<strong>依赖于抽象接口，不要依赖于具体实现。简单的来说就是要求对抽象进行编程，不要对实现进行编程</strong>，这样就降低了客户与实现模块的耦合。<br>　　有时候为了代码复用，一般会把常用的代码写成函数或类库。这样开发新项目的时候直接用就行了。比如做项目的时候大多要访问数据库，所以我们把访问数据库的代码写成了函数。每次做项目去调用这些函数。那么问题来了，我们要做新项目的时候，发现业务逻辑高层模块都是一样的，但客户却希望使用不同的数据库或存储方式，这时就出现了麻烦。我们希望能再次利用这些高层模块，但是高层模块都是与低层的访问数据库绑定在一起，没办法复用这些高层的模块。所以不管是高层模块和底层模块都应该依赖于抽象，具体一点就是接口或者抽象类，只要接口是稳定的，那么任何一个更改都不用担心。<br>　　注意事项：<br>　　1. 高层模块不应该依赖于低层模块。两个都应该依赖抽象。<br>　　2. 抽象不应该依赖细节。细节应依赖于抽象。  </p>
<h2 id="四-迪米特法则（也称为最少知识原则）"><a href="#四-迪米特法则（也称为最少知识原则）" class="headerlink" title="四.迪米特法则（也称为最少知识原则）"></a>四.迪米特法则（也称为最少知识原则）</h2><p>&emsp;&emsp;概念：一个软件实体应当尽可能地少与其他实体发生相互作用。每一个软件单位对其他软件单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。迪米特法则不希望类之间建立直接的联系。如果有真的需要建立联系的，也希望能通过他的友元类来转达。因此，应用迪米特法则有可能造成一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互关系，这在一定程度上增加了系统的复杂度。  </p>
<h2 id="五-接口隔离原则"><a href="#五-接口隔离原则" class="headerlink" title="五.接口隔离原则"></a>五.接口隔离原则</h2><p>&emsp;&emsp;概念：客户端不应该依赖他不需要的接口，类间的依赖关系应建立在最小的接口上。<br>　　接口隔离原则的核心定义，<strong>不出现臃肿的接口</strong>，但是“小”是有限度的，首先就是不能违反单一职责原则。  </p>
<h2 id="六-合成-聚合复用原则"><a href="#六-合成-聚合复用原则" class="headerlink" title="六.合成 / 聚合复用原则"></a>六.合成 / 聚合复用原则</h2><p>&emsp;&emsp;概念：合成 / 聚合复用原则经常又叫做合成复用原则，就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新的对象通过这些对象的委派达到复用已有功能的目的。他的设计原则是：<strong>要尽量使用合成 / 聚合，尽量不要使用继承</strong>。  </p>
<h2 id="七-里氏代换原则"><a href="#七-里氏代换原则" class="headerlink" title="七.里氏代换原则"></a>七.里氏代换原则</h2><p>&emsp;&emsp;概念：里氏代换原则是面向对象设计的基本原则之一。即任何基类可以出现的地方，子类一定可以出现。里氏代换原则是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受影响时，基类才能被真正复用，而衍生类也能够在积累的基础上增加新的行为，里氏代换原则是对 “ 开 - 闭 ” 原则的补充。实现 “ 开 - 闭 ” 原则的关键步骤就是抽象化。在基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br>　　当满足继承的时候，父类肯定存在非私有的成员，子类肯定是得到了父类的这些非私有成员（假设，父类的成员全部是私有的，那么子类没办法从父类继承任何成员，也就不存在继承的额概念了）。既然子类继承了父类的这些非私有成员，那么父类对象也就可以在子类对象中调用这些非私有成员。所以，子类对象可以替换父类对象的位置。<br>　　在里氏代换原则下，<strong>当需求有变化时，只需继承，而别的东西不会改变</strong>。由于里氏代换原则才使得开放封闭称为可能。这样使得子类在父类无需修改就可以扩展。  </p>
<h1 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h1><h2 id="1-开闭原则-Open-Closed-Principle-OCP"><a href="#1-开闭原则-Open-Closed-Principle-OCP" class="headerlink" title="1. 开闭原则(Open-Closed Principle, OCP)"></a>1. 开闭原则(Open-Closed Principle, OCP)</h2><p>&emsp;&emsp;<strong>定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</strong><br>&emsp;&emsp;<strong>个人解释</strong>：软件实体如同你租住的房子一般，你可以向里面添加东西，但是却很难修改这个房间。<strong>扩展开放</strong>就相当于你向租住的房子里放置家具，充实这个房子的功能。<strong>修改关闭</strong>就好比是房子的已经存在的物件，道理上你是没有这个改变他们的能力，实际是你在付出代价之后可以更改。<strong>但</strong>绝对的修改关闭是不可能的。就好比如水龙头、下水管道、灯泡等这些房子存在的基本物件损坏一样，不可避免的，所以需要提前做好准备避免。而在软件中避免就是<strong>创建抽象来隔离以后发生同类的变化</strong>。<br>&emsp;&emsp;<strong>开放-封闭原则，可以保证以前代码的正确性，因为没有修改以前代码，所以可以保证开发人员专注于将设计放在新扩展的代码上。</strong><br>&emsp;&emsp;简单的用一句经典的话来说：过去的事已成历史，是不可修改的，因为时光不可倒流，但现在或明天计划做什么，是可以自己决定（即扩展）的。  </p>
<h2 id="2-单一职责原则（Single-Responsibility-Principle）"><a href="#2-单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="2. 单一职责原则（Single Responsibility Principle）"></a>2. 单一职责原则（Single Responsibility Principle）</h2><p>&emsp;&emsp;<strong>定义：即一个类只负责一项职责，应该仅有一个引起它变化的原因。</strong><br>&emsp;&emsp;<strong>个人解释</strong>：你有一个带茶漏的茶杯（即类）用来喝茶和喝水（即两种职责）。有一天你想将奶茶倒入这个茶杯，但由于奶茶有珍珠，茶杯有茶漏，为了将珍珠也放入茶杯中，你将茶漏取出（改变了茶杯的功能），此时的茶杯就不能用来喝茶，所以该茶杯的职责也就被改变。为了避免这种改变你准备了茶杯和水杯，喝茶就用茶杯，喝水就用水杯。这就符合单一职责，一个类（杯子）只负责一种职责（喝茶或者喝水）。  </p>
<p>&emsp;&emsp;<strong>单一职责的优点</strong>：  </p>
<ol>
<li>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；  </li>
<li>提高类的可读性，提高系统的可维护性；  </li>
<li>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。  </li>
</ol>
<p>&emsp;&emsp;<strong>需要说明的一点</strong>是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都需要遵循这一重要原则。  </p>
<h2 id="3-里氏替换原则（Liskov-Substitution-Principle）"><a href="#3-里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="3. 里氏替换原则（Liskov Substitution Principle）"></a>3. 里氏替换原则（Liskov Substitution Principle）</h2><p>&emsp;&emsp;<strong>定义：子类型必须能够替换掉它们的父类型。</strong><br>&emsp;&emsp;<strong>个人解释</strong>：如果父类型是鸟，子类型是企鹅，在生物学中企鹅归属于鸟，但是企鹅不会飞，在编程的世界中，企鹅就无法归属于鸟，即企鹅不能继承鸟类。<br>&emsp;&emsp;只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。<br>&emsp;&emsp;正是有里氏代换原则，使得继承复用成为了可能。<strong>正是由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展，不然还谈什么扩展开放，修改关闭呢？</strong><br>&emsp;&emsp;<strong>里氏替换原则通俗的来讲就是</strong>：子类可以扩展父类的功能，但不能改变父类原有的功能。  </p>
<p>&emsp;&emsp;<strong>它包含以下4层含义：</strong>  </p>
<ol>
<li><strong>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</strong>  </li>
<li><strong>子类中可以增加自己特有的方法。</strong>  </li>
<li><strong>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</strong>  </li>
<li><strong>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</strong>  </li>
</ol>
<h2 id="4-迪米特法则（Law-Of-Demeter）"><a href="#4-迪米特法则（Law-Of-Demeter）" class="headerlink" title="4. 迪米特法则（Law Of Demeter）"></a>4. 迪米特法则（Law Of Demeter）</h2><p>&emsp;&emsp;<strong>定义：迪米特法则又叫最少知道原则，即一个对象应该对其他对象保持最少的了解。</strong><br>&emsp;&emsp;<strong>解释</strong>：迪米特法则其根本思想是强调了类之间的松耦合。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成影响，也就是说信息的隐藏促进了软件的复用。<br>&emsp;&emsp;软件编程的总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。而迪米特法则就是解决低耦合的方法。<br>&emsp;&emsp;<strong>个人解释</strong>：迪米特法则有个简单的方法叫做：只与直接的朋友通信。朋友关系在编程中就是耦合关系，耦合的方式就像现实世界中交朋友一样有多种，例如：依赖，关联，组合，聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。  </p>
<h2 id="5-依赖倒置原则（Dependence-Inversion-Principle）"><a href="#5-依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="5. 依赖倒置原则（Dependence Inversion Principle）"></a>5. 依赖倒置原则（Dependence Inversion Principle）</h2><p>&emsp;&emsp;<strong>定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。中心思想是面向接口编程。</strong>  </p>
<p>&emsp;&emsp;在实际编程中，我们一般需要做到如下3点：  </p>
<ol>
<li>低层模块尽量都要有抽象类或接口，或者两者都有。  </li>
<li>变量的声明类型尽量是抽象类或接口。  </li>
<li>使用继承时遵循里氏替换原则。  </li>
</ol>
<p>&emsp;&emsp;<strong>依赖倒置原则基于这样一个事实：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在java中，抽象指的是接口或者抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</strong>  </p>
<h2 id="6-接口隔离原则（Interface-Segregation-Principle）"><a href="#6-接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="6. 接口隔离原则（Interface Segregation Principle）"></a>6. 接口隔离原则（Interface Segregation Principle）</h2><p>&emsp;&emsp;<strong>定义：我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</strong><br>&emsp;&emsp;<strong>解释</strong>：在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。就好比术业有专攻一样。通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。  </p>
<p>&emsp;&emsp;采用接口隔离原则对接口进行约束时，要注意以下几点：  </p>
<ol>
<li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。  </li>
<li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。  </li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。  </li>
</ol>
<p>&emsp;&emsp;<strong>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</strong>  </p>
<h2 id="7-合成-聚合原则-Composite-Aggregate-Reuse-Principle-CARP"><a href="#7-合成-聚合原则-Composite-Aggregate-Reuse-Principle-CARP" class="headerlink" title="7. 合成/聚合原则(Composite/Aggregate Reuse Principle,CARP)"></a>7. 合成/聚合原则(Composite/Aggregate Reuse Principle,CARP)</h2><p>&emsp;&emsp;<strong>定义：尽量的使用合成和聚合，而不是继承关系达到复用的目的。换句话说，就是能用合成/聚合的地方，绝不用继承。</strong>  </p>
<p>&emsp;&emsp;<strong>为什么要尽量使用合成/聚合而不使用类继承？</strong>  </p>
<ol>
<li>对象的继承关系在编译时就定义好了，所以无法在运行时改变从父类继承的子类的实现  </li>
<li>子类的实现和它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化  </li>
<li>当你复用子类的时候，如果继承下来的实现不适合解决新的问题，则父类必须重写或者被其它更适合的类所替换，这种依赖关系限制了灵活性，并最终限制了复用性。  </li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>/2019/08/30/DesignPatterns/</url>
      <content type="html"><![CDATA[<blockquote>
<p>简介：<a href="https://www.cnblogs.com/www-zsl187-com/p/8834734.html" target="_blank" rel="noopener">https://www.cnblogs.com/www-zsl187-com/p/8834734.html</a><br>正文：<a href="https://www.cnblogs.com/zhili/p/DesignPatternSummery.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhili/p/DesignPatternSummery.html</a>  </p>
</blockquote>
<p>一、创建型模式<br>1、抽象工厂模式(Abstract factory pattern): 提供一个接口, 用于创建相关或依赖对象的家族, 而不需要指定具体类.<br>2、生成器模式(Builder pattern): 使用生成器模式封装一个产品的构造过程, 并允许按步骤构造. 将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示.<br>3、工厂模式(factory method pattern): 定义了一个创建对象的接口, 但由子类决定要实例化的类是哪一个. 工厂方法让类把实例化推迟到子类.<br>4、原型模式(prototype pattern): 当创建给定类的实例过程很昂贵或很复杂时, 就使用原型模式.<br>5、单例模式(Singleton pattern): 确保一个类只有一个实例, 并提供全局访问点.<br>6、多例模式(Multition pattern): 在一个解决方案中结合两个或多个模式, 以解决一般或重复发生的问题.<br>二、结构型模式<br>1、适配器模式(Adapter pattern): 将一个类的接口, 转换成客户期望的另一个接口. 适配器让原本接口不兼容的类可以合作无间. 对象适配器使用组合, 类适配器使用多重继承.<br>2、桥接模式(Bridge pattern): 使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变.<br>3、组合模式(composite pattern): 允许你将对象组合成树形结构来表现”整体/部分”层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合.<br>4、装饰者模式(decorator pattern): 动态地将责任附加到对象上, 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案.<br>5、外观模式(facade pattern): 提供了一个统一的接口, 用来访问子系统中的一群接口. 外观定义了一个高层接口, 让子系统更容易使用.<br>6、亨元模式(Flyweight Pattern): 如想让某个类的一个实例能用来提供许多”虚拟实例”, 就使用蝇量模式.<br>7、代理模式(Proxy pattern): 为另一个对象提供一个替身或占位符以控制对这个对象的访问.<br>三、行为型模式<br>1、责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象.<br>2、命令模式(Command pattern): 将”请求”封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作.<br>3、解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器.<br>4、迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示.<br>5、中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式.<br>6、备忘录模式(Memento pattern): 当你需要让对象返回之前的状态时(例如, 你的用户请求”撤销”), 你使用备忘录模式.<br>7、观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新.<br>8、状态模式(State pattern): 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类.<br>9、策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户.<br>10、模板方法模式(Template pattern): 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤.<br>11、访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式.  </p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[More Effective C# 书目录]]></title>
      <url>/2019/08/30/MoreEffectiveCSharpContents/</url>
      <content type="html"><![CDATA[<blockquote>
<p>书名：More Effective C# : 改善 C# 代码的 50 个有效方法（原书第 2 版）<br>作者：[ 美 ] 比尔·瓦格纳 ( Bill Wagner )<br>译者：爱飞翔<br>出版：机械工业出版社  </p>
</blockquote>
<p>适用于 <strong>C# 7.0</strong></p>
<a id="more"></a>

<hr>
<h2 id="第1章-处理各种类型的数据"><a href="#第1章-处理各种类型的数据" class="headerlink" title="第1章 处理各种类型的数据"></a>第1章 处理各种类型的数据</h2><h3 id="第1条：使用属性而不是可直接访问的数据成员"><a href="#第1条：使用属性而不是可直接访问的数据成员" class="headerlink" title="第1条：使用属性而不是可直接访问的数据成员"></a>第1条：使用属性而不是可直接访问的数据成员</h3><h3 id="第2条：尽量采用隐式属性来表示可变的数据"><a href="#第2条：尽量采用隐式属性来表示可变的数据" class="headerlink" title="第2条：尽量采用隐式属性来表示可变的数据"></a>第2条：尽量采用隐式属性来表示可变的数据</h3><h3 id="第3条：尽量把值类型设计成不可变的类型"><a href="#第3条：尽量把值类型设计成不可变的类型" class="headerlink" title="第3条：尽量把值类型设计成不可变的类型"></a>第3条：尽量把值类型设计成不可变的类型</h3><h3 id="第4条：注意值类型与引用类型之间的区别"><a href="#第4条：注意值类型与引用类型之间的区别" class="headerlink" title="第4条：注意值类型与引用类型之间的区别"></a>第4条：注意值类型与引用类型之间的区别</h3><h3 id="第5条：确保-0-可以当成值类型的有效状态使用"><a href="#第5条：确保-0-可以当成值类型的有效状态使用" class="headerlink" title="第5条：确保 0 可以当成值类型的有效状态使用"></a>第5条：确保 0 可以当成值类型的有效状态使用</h3><h3 id="第6条：确保属性能够像数据那样运用"><a href="#第6条：确保属性能够像数据那样运用" class="headerlink" title="第6条：确保属性能够像数据那样运用"></a>第6条：确保属性能够像数据那样运用</h3><h3 id="第7条：用元组来限制类型的作用范围"><a href="#第7条：用元组来限制类型的作用范围" class="headerlink" title="第7条：用元组来限制类型的作用范围"></a>第7条：用元组来限制类型的作用范围</h3><h3 id="第8条：在匿名类型中定义局部函数"><a href="#第8条：在匿名类型中定义局部函数" class="headerlink" title="第8条：在匿名类型中定义局部函数"></a>第8条：在匿名类型中定义局部函数</h3><h3 id="第9条：理解相等的不同概念及它们之间的关系"><a href="#第9条：理解相等的不同概念及它们之间的关系" class="headerlink" title="第9条：理解相等的不同概念及它们之间的关系"></a>第9条：理解相等的不同概念及它们之间的关系</h3><h3 id="第10条：留意-GetHashCode-方法的使用陷阱"><a href="#第10条：留意-GetHashCode-方法的使用陷阱" class="headerlink" title="第10条：留意 GetHashCode() 方法的使用陷阱"></a>第10条：留意 GetHashCode() 方法的使用陷阱</h3><hr>
<h2 id="第2章-API-设计"><a href="#第2章-API-设计" class="headerlink" title="第2章 API 设计"></a>第2章 API 设计</h2><h3 id="第11条：不要在-API-中提供转换运算符"><a href="#第11条：不要在-API-中提供转换运算符" class="headerlink" title="第11条：不要在 API 中提供转换运算符"></a>第11条：不要在 API 中提供转换运算符</h3><h3 id="第12条：尽量用可选参数来取代方法重载"><a href="#第12条：尽量用可选参数来取代方法重载" class="headerlink" title="第12条：尽量用可选参数来取代方法重载"></a>第12条：尽量用可选参数来取代方法重载</h3><h3 id="第13条：尽量缩减类型的可见范围"><a href="#第13条：尽量缩减类型的可见范围" class="headerlink" title="第13条：尽量缩减类型的可见范围"></a>第13条：尽量缩减类型的可见范围</h3><h3 id="第14条：优先考虑定义并实现接口，而不是继承"><a href="#第14条：优先考虑定义并实现接口，而不是继承" class="headerlink" title="第14条：优先考虑定义并实现接口，而不是继承"></a>第14条：优先考虑定义并实现接口，而不是继承</h3><h3 id="第15条：理解接口方法与虚方法之间的区别"><a href="#第15条：理解接口方法与虚方法之间的区别" class="headerlink" title="第15条：理解接口方法与虚方法之间的区别"></a>第15条：理解接口方法与虚方法之间的区别</h3><h3 id="第16条：用-Event-模式来实现通知功能"><a href="#第16条：用-Event-模式来实现通知功能" class="headerlink" title="第16条：用 Event 模式来实现通知功能"></a>第16条：用 Event 模式来实现通知功能</h3><h3 id="第17条：不要把类的内部对象通过引用返回给外界"><a href="#第17条：不要把类的内部对象通过引用返回给外界" class="headerlink" title="第17条：不要把类的内部对象通过引用返回给外界"></a>第17条：不要把类的内部对象通过引用返回给外界</h3><h3 id="第18条：优先考虑重写相关的方法，而不是创建事件处理程序"><a href="#第18条：优先考虑重写相关的方法，而不是创建事件处理程序" class="headerlink" title="第18条：优先考虑重写相关的方法，而不是创建事件处理程序"></a>第18条：优先考虑重写相关的方法，而不是创建事件处理程序</h3><h3 id="第19条：不要重载基类中定义的方法"><a href="#第19条：不要重载基类中定义的方法" class="headerlink" title="第19条：不要重载基类中定义的方法"></a>第19条：不要重载基类中定义的方法</h3><h3 id="第20条：了解事件机制为何会提升对象在运行期的耦合程度"><a href="#第20条：了解事件机制为何会提升对象在运行期的耦合程度" class="headerlink" title="第20条：了解事件机制为何会提升对象在运行期的耦合程度"></a>第20条：了解事件机制为何会提升对象在运行期的耦合程度</h3><h3 id="第21条：不要把事件声明成-virtual"><a href="#第21条：不要把事件声明成-virtual" class="headerlink" title="第21条：不要把事件声明成 virtual"></a>第21条：不要把事件声明成 virtual</h3><h3 id="第22条：尽量把重载方法创建得清晰、简洁而完备"><a href="#第22条：尽量把重载方法创建得清晰、简洁而完备" class="headerlink" title="第22条：尽量把重载方法创建得清晰、简洁而完备"></a>第22条：尽量把重载方法创建得清晰、简洁而完备</h3><h3 id="第23条：让-partial-类的构造函数、mutator-方法和事件处理程序调用适当的-partial-方法"><a href="#第23条：让-partial-类的构造函数、mutator-方法和事件处理程序调用适当的-partial-方法" class="headerlink" title="第23条：让 partial 类的构造函数、mutator 方法和事件处理程序调用适当的 partial 方法"></a>第23条：让 partial 类的构造函数、mutator 方法和事件处理程序调用适当的 partial 方法</h3><h3 id="第24条：尽量不要实现-ICloneable-接口，以便留出更多的设计空间"><a href="#第24条：尽量不要实现-ICloneable-接口，以便留出更多的设计空间" class="headerlink" title="第24条：尽量不要实现 ICloneable 接口，以便留出更多的设计空间"></a>第24条：尽量不要实现 ICloneable 接口，以便留出更多的设计空间</h3><h3 id="第25条：数组类型的参数应该用-params-加以修饰"><a href="#第25条：数组类型的参数应该用-params-加以修饰" class="headerlink" title="第25条：数组类型的参数应该用 params 加以修饰"></a>第25条：数组类型的参数应该用 params 加以修饰</h3><h3 id="第26条：在迭代器与异步方法中定义局部函数，以便尽早地报错"><a href="#第26条：在迭代器与异步方法中定义局部函数，以便尽早地报错" class="headerlink" title="第26条：在迭代器与异步方法中定义局部函数，以便尽早地报错"></a>第26条：在迭代器与异步方法中定义局部函数，以便尽早地报错</h3><hr>
<h2 id="第3章-基于任务的异步编程"><a href="#第3章-基于任务的异步编程" class="headerlink" title="第3章 基于任务的异步编程"></a>第3章 基于任务的异步编程</h2><h3 id="第27条：使用异步方法执行异步工作"><a href="#第27条：使用异步方法执行异步工作" class="headerlink" title="第27条：使用异步方法执行异步工作"></a>第27条：使用异步方法执行异步工作</h3><h3 id="第28条：不要编写返回值类型为-void-的异步方法"><a href="#第28条：不要编写返回值类型为-void-的异步方法" class="headerlink" title="第28条：不要编写返回值类型为 void 的异步方法"></a>第28条：不要编写返回值类型为 void 的异步方法</h3><h3 id="第29条：不要把同步方法与异步方法组合起来使用"><a href="#第29条：不要把同步方法与异步方法组合起来使用" class="headerlink" title="第29条：不要把同步方法与异步方法组合起来使用"></a>第29条：不要把同步方法与异步方法组合起来使用</h3><h3 id="第30条：使用异步方法以避免线程分配和上下文切换"><a href="#第30条：使用异步方法以避免线程分配和上下文切换" class="headerlink" title="第30条：使用异步方法以避免线程分配和上下文切换"></a>第30条：使用异步方法以避免线程分配和上下文切换</h3><h3 id="第31条：避免不必要的上下文编组"><a href="#第31条：避免不必要的上下文编组" class="headerlink" title="第31条：避免不必要的上下文编组"></a>第31条：避免不必要的上下文编组</h3><h3 id="第32条：通过-Task-对象来安排异步工作"><a href="#第32条：通过-Task-对象来安排异步工作" class="headerlink" title="第32条：通过 Task 对象来安排异步工作"></a>第32条：通过 Task 对象来安排异步工作</h3><h3 id="第33条：考虑实现任务取消协议"><a href="#第33条：考虑实现任务取消协议" class="headerlink" title="第33条：考虑实现任务取消协议"></a>第33条：考虑实现任务取消协议</h3><h3 id="第34条：缓存泛型异步方法的返回值"><a href="#第34条：缓存泛型异步方法的返回值" class="headerlink" title="第34条：缓存泛型异步方法的返回值"></a>第34条：缓存泛型异步方法的返回值</h3><hr>
<h2 id="第4章-并行处理"><a href="#第4章-并行处理" class="headerlink" title="第4章 并行处理"></a>第4章 并行处理</h2><h3 id="第35条：了解-PLINQ-是怎样实现并行算法的"><a href="#第35条：了解-PLINQ-是怎样实现并行算法的" class="headerlink" title="第35条：了解 PLINQ 是怎样实现并行算法的"></a>第35条：了解 PLINQ 是怎样实现并行算法的</h3><h3 id="第36条：编写并行算法时要考虑异常状况"><a href="#第36条：编写并行算法时要考虑异常状况" class="headerlink" title="第36条：编写并行算法时要考虑异常状况"></a>第36条：编写并行算法时要考虑异常状况</h3><h3 id="第37条：优先使用线程池而不是创建新的线程"><a href="#第37条：优先使用线程池而不是创建新的线程" class="headerlink" title="第37条：优先使用线程池而不是创建新的线程"></a>第37条：优先使用线程池而不是创建新的线程</h3><h3 id="第38条：考虑使用-BackgroundWorker-在线程之间通信"><a href="#第38条：考虑使用-BackgroundWorker-在线程之间通信" class="headerlink" title="第38条：考虑使用 BackgroundWorker 在线程之间通信"></a>第38条：考虑使用 BackgroundWorker 在线程之间通信</h3><h3 id="第39条：学会在-XAML-环境下执行跨线程调用"><a href="#第39条：学会在-XAML-环境下执行跨线程调用" class="headerlink" title="第39条：学会在 XAML 环境下执行跨线程调用"></a>第39条：学会在 XAML 环境下执行跨线程调用</h3><h3 id="第40条：首先考虑用-lock-实现同步"><a href="#第40条：首先考虑用-lock-实现同步" class="headerlink" title="第40条：首先考虑用 lock() 实现同步"></a>第40条：首先考虑用 lock() 实现同步</h3><h3 id="第41条：尽量缩减锁定范围"><a href="#第41条：尽量缩减锁定范围" class="headerlink" title="第41条：尽量缩减锁定范围"></a>第41条：尽量缩减锁定范围</h3><h3 id="第42条：不要在加了锁的区域内调用未知的方法"><a href="#第42条：不要在加了锁的区域内调用未知的方法" class="headerlink" title="第42条：不要在加了锁的区域内调用未知的方法"></a>第42条：不要在加了锁的区域内调用未知的方法</h3><hr>
<h2 id="第5章-动态编程"><a href="#第5章-动态编程" class="headerlink" title="第5章 动态编程"></a>第5章 动态编程</h2><h3 id="第43条：了解动态编程的优点及缺点"><a href="#第43条：了解动态编程的优点及缺点" class="headerlink" title="第43条：了解动态编程的优点及缺点"></a>第43条：了解动态编程的优点及缺点</h3><h3 id="第44条：通过动态编程技术更好地运用泛型参数的运行期类型"><a href="#第44条：通过动态编程技术更好地运用泛型参数的运行期类型" class="headerlink" title="第44条：通过动态编程技术更好地运用泛型参数的运行期类型"></a>第44条：通过动态编程技术更好地运用泛型参数的运行期类型</h3><h3 id="第45条：使用-DynamicObject-和-IDynamicMetaObjectProvider-实现数据驱动的动态类型"><a href="#第45条：使用-DynamicObject-和-IDynamicMetaObjectProvider-实现数据驱动的动态类型" class="headerlink" title="第45条：使用 DynamicObject 和 IDynamicMetaObjectProvider 实现数据驱动的动态类型"></a>第45条：使用 DynamicObject 和 IDynamicMetaObjectProvider 实现数据驱动的动态类型</h3><h3 id="第46条：学会正确使用-Expression-API"><a href="#第46条：学会正确使用-Expression-API" class="headerlink" title="第46条：学会正确使用 Expression API"></a>第46条：学会正确使用 Expression API</h3><h3 id="第47条：尽量减少公有-API-中的动态对象"><a href="#第47条：尽量减少公有-API-中的动态对象" class="headerlink" title="第47条：尽量减少公有 API 中的动态对象"></a>第47条：尽量减少公有 API 中的动态对象</h3><hr>
<h2 id="第6章-加入全球-C-社区"><a href="#第6章-加入全球-C-社区" class="headerlink" title="第6章 加入全球 C# 社区"></a>第6章 加入全球 C# 社区</h2><h3 id="第48条：最流行的写法不一定最合适"><a href="#第48条：最流行的写法不一定最合适" class="headerlink" title="第48条：最流行的写法不一定最合适"></a>第48条：最流行的写法不一定最合适</h3><h3 id="第49条：与大家一起制定规范并编写代码"><a href="#第49条：与大家一起制定规范并编写代码" class="headerlink" title="第49条：与大家一起制定规范并编写代码"></a>第49条：与大家一起制定规范并编写代码</h3><h3 id="第50条：考虑用分析器自动检查代码质量"><a href="#第50条：考虑用分析器自动检查代码质量" class="headerlink" title="第50条：考虑用分析器自动检查代码质量"></a>第50条：考虑用分析器自动检查代码质量</h3><hr>
<h2 id="中英文词汇对照表"><a href="#中英文词汇对照表" class="headerlink" title="中英文词汇对照表"></a>中英文词汇对照表</h2>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Effective C# 书目录]]></title>
      <url>/2019/08/30/EffectiveCSharpContents/</url>
      <content type="html"><![CDATA[<blockquote>
<p>书名：Effective C# : 改善 C# 代码的 50 个有效方法（原书第 3 版）<br>作者：[ 美 ] 比尔·瓦格纳 ( Bill Wagner )<br>译者：爱飞翔<br>出版：机械工业出版社  </p>
</blockquote>
<p>适用于 <strong>C# 6.0</strong></p>
<a id="more"></a>

<hr>
<h2 id="第1章-C-语言的编程习惯"><a href="#第1章-C-语言的编程习惯" class="headerlink" title="第1章 C# 语言的编程习惯"></a>第1章 C# 语言的编程习惯</h2><h3 id="第1条：优先使用隐式类型的局部变量"><a href="#第1条：优先使用隐式类型的局部变量" class="headerlink" title="第1条：优先使用隐式类型的局部变量"></a>第1条：优先使用隐式类型的局部变量</h3><h3 id="第2条：考虑用-readonly-代替-const"><a href="#第2条：考虑用-readonly-代替-const" class="headerlink" title="第2条：考虑用 readonly 代替 const"></a>第2条：考虑用 readonly 代替 const</h3><h3 id="第3条：优先考虑-is-或-as-运算符，尽量少用强制类型转换"><a href="#第3条：优先考虑-is-或-as-运算符，尽量少用强制类型转换" class="headerlink" title="第3条：优先考虑 is 或 as 运算符，尽量少用强制类型转换"></a>第3条：优先考虑 is 或 as 运算符，尽量少用强制类型转换</h3><h3 id="第4条：用内插字符串取代-string-Format"><a href="#第4条：用内插字符串取代-string-Format" class="headerlink" title="第4条：用内插字符串取代 string.Format()"></a>第4条：用内插字符串取代 string.Format()</h3><h3 id="第5条：用-FormattableString-取代专门为特定区域而写的字符串"><a href="#第5条：用-FormattableString-取代专门为特定区域而写的字符串" class="headerlink" title="第5条：用 FormattableString 取代专门为特定区域而写的字符串"></a>第5条：用 FormattableString 取代专门为特定区域而写的字符串</h3><h3 id="第6条：不要用表示符号名称的硬字符串来调用-API"><a href="#第6条：不要用表示符号名称的硬字符串来调用-API" class="headerlink" title="第6条：不要用表示符号名称的硬字符串来调用 API"></a>第6条：不要用表示符号名称的硬字符串来调用 API</h3><h3 id="第7条：用委托表示回调"><a href="#第7条：用委托表示回调" class="headerlink" title="第7条：用委托表示回调"></a>第7条：用委托表示回调</h3><h3 id="第8条：用-null-条件运算符调用事件处理程序"><a href="#第8条：用-null-条件运算符调用事件处理程序" class="headerlink" title="第8条：用 null 条件运算符调用事件处理程序"></a>第8条：用 null 条件运算符调用事件处理程序</h3><h3 id="第9条：尽量避免装箱与取消装箱这两种操作"><a href="#第9条：尽量避免装箱与取消装箱这两种操作" class="headerlink" title="第9条：尽量避免装箱与取消装箱这两种操作"></a>第9条：尽量避免装箱与取消装箱这两种操作</h3><h3 id="第10条：只有在应对新版基类与现有子类之间的冲突时才应该使用-new-修饰符"><a href="#第10条：只有在应对新版基类与现有子类之间的冲突时才应该使用-new-修饰符" class="headerlink" title="第10条：只有在应对新版基类与现有子类之间的冲突时才应该使用 new 修饰符"></a>第10条：只有在应对新版基类与现有子类之间的冲突时才应该使用 new 修饰符</h3><hr>
<h2 id="第2章-NET-的资源管理"><a href="#第2章-NET-的资源管理" class="headerlink" title="第2章 .NET 的资源管理"></a>第2章 .NET 的资源管理</h2><h3 id="第11条：理解并善用-NET-的资源管理机制"><a href="#第11条：理解并善用-NET-的资源管理机制" class="headerlink" title="第11条：理解并善用 .NET 的资源管理机制"></a>第11条：理解并善用 .NET 的资源管理机制</h3><h3 id="第12条：声明字段时，尽量直接为其设定初始值"><a href="#第12条：声明字段时，尽量直接为其设定初始值" class="headerlink" title="第12条：声明字段时，尽量直接为其设定初始值"></a>第12条：声明字段时，尽量直接为其设定初始值</h3><h3 id="第13条：用适当的方式初始化类中的静态成员"><a href="#第13条：用适当的方式初始化类中的静态成员" class="headerlink" title="第13条：用适当的方式初始化类中的静态成员"></a>第13条：用适当的方式初始化类中的静态成员</h3><h3 id="第14条：尽量删减重复的初始化逻辑"><a href="#第14条：尽量删减重复的初始化逻辑" class="headerlink" title="第14条：尽量删减重复的初始化逻辑"></a>第14条：尽量删减重复的初始化逻辑</h3><h3 id="第15条：不要创建无谓的对象"><a href="#第15条：不要创建无谓的对象" class="headerlink" title="第15条：不要创建无谓的对象"></a>第15条：不要创建无谓的对象</h3><h3 id="第16条：绝对不要在构造函数里面调用虚函数"><a href="#第16条：绝对不要在构造函数里面调用虚函数" class="headerlink" title="第16条：绝对不要在构造函数里面调用虚函数"></a>第16条：绝对不要在构造函数里面调用虚函数</h3><h3 id="第17条：实现标准的-dispose-模式"><a href="#第17条：实现标准的-dispose-模式" class="headerlink" title="第17条：实现标准的 dispose 模式"></a>第17条：实现标准的 dispose 模式</h3><hr>
<h2 id="第3章-合理地运用泛型"><a href="#第3章-合理地运用泛型" class="headerlink" title="第3章 合理地运用泛型"></a>第3章 合理地运用泛型</h2><h3 id="第18条：只定义刚好够用的约束条件"><a href="#第18条：只定义刚好够用的约束条件" class="headerlink" title="第18条：只定义刚好够用的约束条件"></a>第18条：只定义刚好够用的约束条件</h3><h3 id="第19条：通过运行期类型检查实现特定的泛型算法"><a href="#第19条：通过运行期类型检查实现特定的泛型算法" class="headerlink" title="第19条：通过运行期类型检查实现特定的泛型算法"></a>第19条：通过运行期类型检查实现特定的泛型算法</h3><h3 id="第20条：通过-IComparable-lt-T-gt-及-IComparer-lt-T-gt-定义顺序关系"><a href="#第20条：通过-IComparable-lt-T-gt-及-IComparer-lt-T-gt-定义顺序关系" class="headerlink" title="第20条：通过 IComparable&lt;T&gt; 及 IComparer&lt;T&gt; 定义顺序关系"></a>第20条：通过 IComparable&lt;T&gt; 及 IComparer&lt;T&gt; 定义顺序关系</h3><h3 id="第21条：创建泛型类时，总是应该给实现了-IDisposable-的类型参数提供支持"><a href="#第21条：创建泛型类时，总是应该给实现了-IDisposable-的类型参数提供支持" class="headerlink" title="第21条：创建泛型类时，总是应该给实现了 IDisposable 的类型参数提供支持"></a>第21条：创建泛型类时，总是应该给实现了 IDisposable 的类型参数提供支持</h3><h3 id="第22条：考虑支持泛型协变与逆变"><a href="#第22条：考虑支持泛型协变与逆变" class="headerlink" title="第22条：考虑支持泛型协变与逆变"></a>第22条：考虑支持泛型协变与逆变</h3><h3 id="第23条：用委托要求类型参数必须提供某种方法"><a href="#第23条：用委托要求类型参数必须提供某种方法" class="headerlink" title="第23条：用委托要求类型参数必须提供某种方法"></a>第23条：用委托要求类型参数必须提供某种方法</h3><h3 id="第24条：如果有泛型方法，就不要再创建针对基类或接口的重载版本"><a href="#第24条：如果有泛型方法，就不要再创建针对基类或接口的重载版本" class="headerlink" title="第24条：如果有泛型方法，就不要再创建针对基类或接口的重载版本"></a>第24条：如果有泛型方法，就不要再创建针对基类或接口的重载版本</h3><h3 id="第25条：如果不需要把类型参数所表示的对象设为实例字段，那么应该优先考虑创建泛型方法，而不是泛型类"><a href="#第25条：如果不需要把类型参数所表示的对象设为实例字段，那么应该优先考虑创建泛型方法，而不是泛型类" class="headerlink" title="第25条：如果不需要把类型参数所表示的对象设为实例字段，那么应该优先考虑创建泛型方法，而不是泛型类"></a>第25条：如果不需要把类型参数所表示的对象设为实例字段，那么应该优先考虑创建泛型方法，而不是泛型类</h3><h3 id="第26条：实现泛型接口的同时，还应该实现非泛型接口"><a href="#第26条：实现泛型接口的同时，还应该实现非泛型接口" class="headerlink" title="第26条：实现泛型接口的同时，还应该实现非泛型接口"></a>第26条：实现泛型接口的同时，还应该实现非泛型接口</h3><h3 id="第27条：只把必备的契约定义在接口中，把其他功能留给扩展方法去实现"><a href="#第27条：只把必备的契约定义在接口中，把其他功能留给扩展方法去实现" class="headerlink" title="第27条：只把必备的契约定义在接口中，把其他功能留给扩展方法去实现"></a>第27条：只把必备的契约定义在接口中，把其他功能留给扩展方法去实现</h3><h3 id="第28条：考虑通过扩展方法增强已构造类型的功能"><a href="#第28条：考虑通过扩展方法增强已构造类型的功能" class="headerlink" title="第28条：考虑通过扩展方法增强已构造类型的功能"></a>第28条：考虑通过扩展方法增强已构造类型的功能</h3><hr>
<h2 id="第4章-合理地运用-LINQ"><a href="#第4章-合理地运用-LINQ" class="headerlink" title="第4章 合理地运用 LINQ"></a>第4章 合理地运用 LINQ</h2><h3 id="第29条：优先考虑提供迭代器方法，而不要返回集合"><a href="#第29条：优先考虑提供迭代器方法，而不要返回集合" class="headerlink" title="第29条：优先考虑提供迭代器方法，而不要返回集合"></a>第29条：优先考虑提供迭代器方法，而不要返回集合</h3><h3 id="第30条：优先考虑通过查询语句来编写代码，而不要使用循环语句"><a href="#第30条：优先考虑通过查询语句来编写代码，而不要使用循环语句" class="headerlink" title="第30条：优先考虑通过查询语句来编写代码，而不要使用循环语句"></a>第30条：优先考虑通过查询语句来编写代码，而不要使用循环语句</h3><h3 id="第31条：把针对序列的-API-设计得更加易于拼接"><a href="#第31条：把针对序列的-API-设计得更加易于拼接" class="headerlink" title="第31条：把针对序列的 API 设计得更加易于拼接"></a>第31条：把针对序列的 API 设计得更加易于拼接</h3><h3 id="第32条：将迭代逻辑与操作、谓词及函数解耦"><a href="#第32条：将迭代逻辑与操作、谓词及函数解耦" class="headerlink" title="第32条：将迭代逻辑与操作、谓词及函数解耦"></a>第32条：将迭代逻辑与操作、谓词及函数解耦</h3><h3 id="第33条：等真正用到序列中的元素时再去生成"><a href="#第33条：等真正用到序列中的元素时再去生成" class="headerlink" title="第33条：等真正用到序列中的元素时再去生成"></a>第33条：等真正用到序列中的元素时再去生成</h3><h3 id="第34条：考虑通过函数参数来放松耦合关系"><a href="#第34条：考虑通过函数参数来放松耦合关系" class="headerlink" title="第34条：考虑通过函数参数来放松耦合关系"></a>第34条：考虑通过函数参数来放松耦合关系</h3><h3 id="第35条：绝对不要重载扩展方法"><a href="#第35条：绝对不要重载扩展方法" class="headerlink" title="第35条：绝对不要重载扩展方法"></a>第35条：绝对不要重载扩展方法</h3><h3 id="第36条：理解查询表达式与方法调用之间的映射关系"><a href="#第36条：理解查询表达式与方法调用之间的映射关系" class="headerlink" title="第36条：理解查询表达式与方法调用之间的映射关系"></a>第36条：理解查询表达式与方法调用之间的映射关系</h3><h3 id="第37条：尽量采用惰性求值的方式来查询，而不要及早求值"><a href="#第37条：尽量采用惰性求值的方式来查询，而不要及早求值" class="headerlink" title="第37条：尽量采用惰性求值的方式来查询，而不要及早求值"></a>第37条：尽量采用惰性求值的方式来查询，而不要及早求值</h3><h3 id="第38条：考虑用-lambda-表达式来代替方法"><a href="#第38条：考虑用-lambda-表达式来代替方法" class="headerlink" title="第38条：考虑用 lambda 表达式来代替方法"></a>第38条：考虑用 lambda 表达式来代替方法</h3><h3 id="第39条：不要在-Func-与-Action-中抛出异常"><a href="#第39条：不要在-Func-与-Action-中抛出异常" class="headerlink" title="第39条：不要在 Func 与 Action 中抛出异常"></a>第39条：不要在 Func 与 Action 中抛出异常</h3><h3 id="第40条：掌握尽早执行与延迟执行之间的区别"><a href="#第40条：掌握尽早执行与延迟执行之间的区别" class="headerlink" title="第40条：掌握尽早执行与延迟执行之间的区别"></a>第40条：掌握尽早执行与延迟执行之间的区别</h3><h3 id="第41条：不要把开销较大的资源捕获到闭包中"><a href="#第41条：不要把开销较大的资源捕获到闭包中" class="headerlink" title="第41条：不要把开销较大的资源捕获到闭包中"></a>第41条：不要把开销较大的资源捕获到闭包中</h3><h3 id="第42条：注意-IEnumerable-与-IQueryable-形式的数据源之间的区别"><a href="#第42条：注意-IEnumerable-与-IQueryable-形式的数据源之间的区别" class="headerlink" title="第42条：注意 IEnumerable 与 IQueryable 形式的数据源之间的区别"></a>第42条：注意 IEnumerable 与 IQueryable 形式的数据源之间的区别</h3><h3 id="第43条：用-Single-及-First-来明确地验证你对查询结果所做的假设"><a href="#第43条：用-Single-及-First-来明确地验证你对查询结果所做的假设" class="headerlink" title="第43条：用 Single() 及 First() 来明确地验证你对查询结果所做的假设"></a>第43条：用 Single() 及 First() 来明确地验证你对查询结果所做的假设</h3><h3 id="第44条：不要修改绑定变量"><a href="#第44条：不要修改绑定变量" class="headerlink" title="第44条：不要修改绑定变量"></a>第44条：不要修改绑定变量</h3><hr>
<h2 id="第5章-合理地运用异常"><a href="#第5章-合理地运用异常" class="headerlink" title="第5章 合理地运用异常"></a>第5章 合理地运用异常</h2><h3 id="第45条：考虑在方法约定遭到违背时抛出异常"><a href="#第45条：考虑在方法约定遭到违背时抛出异常" class="headerlink" title="第45条：考虑在方法约定遭到违背时抛出异常"></a>第45条：考虑在方法约定遭到违背时抛出异常</h3><h3 id="第46条：利用-using-及-try-finally-来清理资源"><a href="#第46条：利用-using-及-try-finally-来清理资源" class="headerlink" title="第46条：利用 using 及 try / finally 来清理资源"></a>第46条：利用 using 及 try / finally 来清理资源</h3><h3 id="第47条：专门针对应用程序创建异常"><a href="#第47条：专门针对应用程序创建异常" class="headerlink" title="第47条：专门针对应用程序创建异常"></a>第47条：专门针对应用程序创建异常</h3><h3 id="第48条：优先考虑做出强异常保证"><a href="#第48条：优先考虑做出强异常保证" class="headerlink" title="第48条：优先考虑做出强异常保证"></a>第48条：优先考虑做出强异常保证</h3><h3 id="第49条：考虑用异常筛选器来改写先捕获异常再重新抛出的逻辑"><a href="#第49条：考虑用异常筛选器来改写先捕获异常再重新抛出的逻辑" class="headerlink" title="第49条：考虑用异常筛选器来改写先捕获异常再重新抛出的逻辑"></a>第49条：考虑用异常筛选器来改写先捕获异常再重新抛出的逻辑</h3><h3 id="第50条：合理利用异常筛选器的副作用来实现某些效果"><a href="#第50条：合理利用异常筛选器的副作用来实现某些效果" class="headerlink" title="第50条：合理利用异常筛选器的副作用来实现某些效果"></a>第50条：合理利用异常筛选器的副作用来实现某些效果</h3><hr>
<h2 id="中英文词汇对照表"><a href="#中英文词汇对照表" class="headerlink" title="中英文词汇对照表"></a>中英文词汇对照表</h2>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页书签]]></title>
      <url>/2019/08/30/Bookmarks/</url>
      <content type="html"><![CDATA[<p>个人网页收藏夹  </p>
<a id="more"></a>

<p><a href="https://tao-lol.top/">tao-lol</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/index" target="_blank" rel="noopener">.NET API 浏览器</a><br><a href="https://try.dot.net/" target="_blank" rel="noopener">try.dot.net</a>  </p>
<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="微软官方文档"><a href="#微软官方文档" class="headerlink" title="微软官方文档"></a>微软官方文档</h3><p><a href="https://docs.microsoft.com/zh-cn/dotnet/" target="_blank" rel="noopener">.NET</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/" target="_blank" rel="noopener">.NET Standard</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/" target="_blank" rel="noopener">.NET Framework</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/core/" target="_blank" rel="noopener">.NET Core</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/" target="_blank" rel="noopener">C#</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/" target="_blank" rel="noopener">WPF</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/" target="_blank" rel="noopener">ASP.NET Core</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/razor-pages/" target="_blank" rel="noopener">Razor Pages</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/" target="_blank" rel="noopener">MVC</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/blazor/" target="_blank" rel="noopener">Blazor</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/web-api/" target="_blank" rel="noopener">Web API</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/signalr/" target="_blank" rel="noopener">SignalR</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/grpc/" target="_blank" rel="noopener">gRPC</a><br><a href="https://docs.microsoft.com/zh-cn/xamarin/" target="_blank" rel="noopener">Xamarin</a><br><a href="https://docs.microsoft.com/zh-cn/ef/core/" target="_blank" rel="noopener">Entity Framework Core</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/machine-learning/" target="_blank" rel="noopener">ML.NET</a><br><a href="https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md" target="_blank" rel="noopener">Microsoft REST API Guidelines</a><br><a href="https://docs.microsoft.com/zh-cn/azure/devops/" target="_blank" rel="noopener">Azure Devops</a><br><a href="https://docs.microsoft.com/en-us/azure/architecture/" target="_blank" rel="noopener">Azure Architecture</a>  </p>
<h3 id="程序架构"><a href="#程序架构" class="headerlink" title="程序架构"></a>程序架构</h3><p><a href="http://prismlibrary.github.io/docs/" target="_blank" rel="noopener">Prism</a><br><a href="https://docs.abp.io/zh-Hans/abp/master/" target="_blank" rel="noopener">ABP</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/" target="_blank" rel="noopener">微服务</a><br><a href="https://github.com/dotnet-architecture/eShopOnContainers" target="_blank" rel="noopener">eShopOnContainers</a>  </p>
<h3 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h3><p><a href="https://github.com/domaindrivendev/Swashbuckle" target="_blank" rel="noopener">SwashBuckle</a><br><a href="https://github.com/RicoSuter/NSwag/wiki" target="_blank" rel="noopener">NSwag</a><br><a href="https://www.rabbitmq.com/documentation.html" target="_blank" rel="noopener">RabbitMQ</a><br><a href="https://github.com/EasyNetQ/EasyNetQ/wiki/Introduction" target="_blank" rel="noopener">EasyNetQ</a><br><a href="https://masstransit-project.com/MassTransit/" target="_blank" rel="noopener">MassTransit</a><br><a href="https://www.consul.io/docs/index.html" target="_blank" rel="noopener">Consul</a><br><a href="https://ocelot.readthedocs.io/" target="_blank" rel="noopener">Ocelot</a><br><a href="http://cap.dotnetcore.xyz/user-guide/zh/getting-started/quick-start/" target="_blank" rel="noopener">CAP</a><br><a href="https://autofac.readthedocs.io/" target="_blank" rel="noopener">Autofac</a><br><a href="docs.automapper.org/">AutoMapper</a><br><a href="https://github.com/jbogard/MediatR/wiki" target="_blank" rel="noopener">MediatR</a><br><a href="https://github.com/serilog/serilog/wiki" target="_blank" rel="noopener">Serilog</a><br><a href="https://github.com/NLog/NLog/wiki" target="_blank" rel="noopener">NLog</a><br><a href="https://fluentvalidation.net/start" target="_blank" rel="noopener">FluentValidation</a><br><a href="https://github.com/scottksmith95/LINQKit" target="_blank" rel="noopener">LINQKit</a><br><a href="docs.identityserver.io/">IdentityServer4</a><br><a href="https://identitymodel.readthedocs.io/" target="_blank" rel="noopener">IdentityModel</a><br><a href="https://github.com/App-vNext/Polly/wiki" target="_blank" rel="noopener">Polly</a><br><a href="https://github.com/JanKallman/EPPlus/wiki" target="_blank" rel="noopener">EPPlus</a><br><a href="https://joshclose.github.io/CsvHelper/getting-started" target="_blank" rel="noopener">CSVHelper</a><br><a href="https://www.newtonsoft.com/json/help/" target="_blank" rel="noopener">Json.NET</a><br><a href="https://www.quartz-scheduler.net/documentation/index.html" target="_blank" rel="noopener">Quartz.NET</a><br><a href="https://github.com/nunit/docs/wiki" target="_blank" rel="noopener">NUnit</a><br><a href="https://xunit.net/#documentation" target="_blank" rel="noopener">xUnit</a><br><a href="https://github.com/moq/moq4/wiki" target="_blank" rel="noopener">Moq</a><br><a href="https://fluentassertions.com/introduction" target="_blank" rel="noopener">FluentAssertions</a><br><a href="https://anglesharp.github.io/docs.html" target="_blank" rel="noopener">AngleSharp</a><br><a href="https://github.com/2881099/FreeSql/wiki" target="_blank" rel="noopener">FreeSql</a><br><a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener">Dapper</a><br><a href="https://github.com/2881099/csredis" target="_blank" rel="noopener">CSRedis</a>  </p>
<h3 id="WPF-UI"><a href="#WPF-UI" class="headerlink" title="WPF UI"></a>WPF UI</h3><p><a href="https://github.com/MahApps/MahApps.Metro/wiki" target="_blank" rel="noopener">MahApps.Metro</a><br><a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/wiki" target="_blank" rel="noopener">MaterialDesignInXamlToolkit</a><br><a href="https://github.com/spiegelp/MaterialDesignExtensions/wiki" target="_blank" rel="noopener">MaterialDesignExtensions</a><br><a href="https://github.com/Panuon/PanuonUI.Silver" target="_blank" rel="noopener">PanuonUI.Silver</a><br><a href="https://github.com/ButchersBoy/Dragablz/wiki" target="_blank" rel="noopener">Dragablz</a><br><a href="https://lvcharts.net/App/examples/wpf/start" target="_blank" rel="noopener">LiveCharts</a><br><a href="https://reactiveui.net/docs/" target="_blank" rel="noopener">ReactiveUI</a>  </p>
<h3 id="Web相关"><a href="#Web相关" class="headerlink" title="Web相关"></a>Web相关</h3><p><a href="https://angular.io/docs" target="_blank" rel="noopener">Angular</a><br><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a><br><a href="https://zh-hans.reactjs.org/docs/" target="_blank" rel="noopener">React</a><br><a href="https://datatables.net/manual/" target="_blank" rel="noopener">DataTables</a><br><a href="https://getbootstrap.com/docs/" target="_blank" rel="noopener">Bootstrap</a><br><a href="https://ng-bootstrap.github.io/#/getting-started" target="_blank" rel="noopener">NG-Bootstrap</a><br><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design of React</a><br><a href="https://ng.ant.design/docs/introduce/zh" target="_blank" rel="noopener">Ant Design of Angular</a><br><a href="https://vue.ant.design/docs/vue/introduce/" target="_blank" rel="noopener">Ant Design of Vue</a><br><a href="https://material.angular.io/components/categories" target="_blank" rel="noopener">Angular Material</a>  </p>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p><a href="https://docs.microsoft.com/zh-cn/sql/t-sql/" target="_blank" rel="noopener">T-SQL</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript</a><br><a href="https://api.jquery.com/" target="_blank" rel="noopener">jQuery</a><br><a href="https://www.typescriptlang.org/docs/" target="_blank" rel="noopener">TypeScript</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener">HTML</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">CSS</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式</a></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><a href="https://redis.io/documentation" target="_blank" rel="noopener">Redis</a><br><a href="https://docs.mongodb.com/" target="_blank" rel="noopener">mongoDB</a><br><a href="https://docs.microsoft.com/zh-cn/sql/sql-server/" target="_blank" rel="noopener">SQL Server</a><br><a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">MySQL</a><br><a href="https://www.sqlite.org/docs.html" target="_blank" rel="noopener">SQLite</a>  </p>
<h3 id="未归类"><a href="#未归类" class="headerlink" title="未归类"></a>未归类</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/index.html" target="_blank" rel="noopener">Elasticsearch</a><br><a href="https://www.elastic.co/guide/en/kibana/master/index.html" target="_blank" rel="noopener">Kibana</a><br><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker</a><br><a href="https://github.com/jesseduffield/lazydocker" target="_blank" rel="noopener">LazyDocker</a><br><a href="https://kubernetes.io/docs/concepts/" target="_blank" rel="noopener">Kubernetes</a><br><a href="https://github.com/apache/skywalking/tree/master/docs" target="_blank" rel="noopener">SkyWalking</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">HTTP</a>  </p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><a href="https://git-scm.com/doc" target="_blank" rel="noopener">Git</a><br><a href="https://swagger.io/docs/" target="_blank" rel="noopener">Swagger</a><br><a href="https://docs.unity3d.com/Manual/" target="_blank" rel="noopener">Unity</a><br><a href="https://docs.microsoft.com/en-us/powershell/" target="_blank" rel="noopener">PowerShell</a><br><a href="https://visualgo.net/" target="_blank" rel="noopener">VisuAlgo</a><br><a href="https://www.connectionstrings.com/" target="_blank" rel="noopener">ConnectionStrings</a><br><a href="https://trac.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a><br><a href="https://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">TypeScript Types Search</a></p>
<h3 id="中文教程"><a href="#中文教程" class="headerlink" title="中文教程"></a>中文教程</h3><p><a href="http://manual.phpv.net/regular_expression.html" target="_blank" rel="noopener">正则表达式30分钟入门教程</a><br><a href="https://linux.vbird.org/" target="_blank" rel="noopener">鳥哥的 Linux 私房菜</a><br><a href="https://www.cnblogs.com/abcdwxc/archive/2007/10/30/942834.html" target="_blank" rel="noopener">C#设计模式（23种设计模式）</a><br><a href="https://www.cnblogs.com/zhili/p/DesignPatternSummery.html" target="_blank" rel="noopener">C#设计模式总结</a><br><a href="https://www.cnblogs.com/fatbird/p/SortAlgorithm.html" target="_blank" rel="noopener">8种主要排序算法的C#实现</a><br><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">JavaScript教程 - 网道</a><br><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a><br><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">TypeScript入门教程</a><br><a href="https://www.cnblogs.com/ZaraNet/p/10323105.html" target="_blank" rel="noopener">.NET Core IdentityServer4实战 - zaraNet</a><br><a href="https://www.cnblogs.com/viter/p/10474091.html" target="_blank" rel="noopener">Asp.NETCore轻松学系列阅读指引目录 - Ron Liang</a><br><a href="https://www.cnblogs.com/stulzq/p/8119928.html" target="_blank" rel="noopener">IdentityServer4 中文文档与实战 - 晓晨Master</a><br><a href="https://www.cnblogs.com/MrHSR/category/1368488.html" target="_blank" rel="noopener">asp.net Core系列篇 - 花阴偷移</a><br><a href="https://www.cnblogs.com/edisonchou/p/dotnetcore_microservice_foundation_blogs_index_final.html" target="_blank" rel="noopener">.NET Core微服务架构系列文章索引目录 - Edison Zhou</a><br><a href="https://www.cnblogs.com/edisonchou/p/4820676.html" target="_blank" rel="noopener">.NET全栈开发工程师学习路径 - Edison Zhou</a><br><a href="https://www.cnblogs.com/edisonchou/p/3843287.html" target="_blank" rel="noopener">博文资源汇总 - Edison Zhou</a><br><a href="https://rachel53461.wordpress.com/2011/05/08/simplemvvmexample/" target="_blank" rel="noopener">A Simple MVVM Example</a>  </p>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p><a href="https://icons8.com/icons" target="_blank" rel="noopener">Icons8</a><br><a href="https://materialdesignicons.com/" target="_blank" rel="noopener">Material Design Icons</a><br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">IconFont 阿里巴巴矢量图标库</a><br><a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a><br><a href="https://realfavicongenerator.net/" target="_blank" rel="noopener">Favicon</a><br><a href="https://unicode-table.com/" target="_blank" rel="noopener">Unicode</a>  </p>
<h1 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h1><p><a href="https://steamcn.com/forum.php" target="_blank" rel="noopener">SteamCN 蒸汽动力</a><br><a href="https://www.gamersky.com/" target="_blank" rel="noopener">游民星空</a><br><a href="https://www.cnbeta.com/" target="_blank" rel="noopener">cnBeta</a><br><a href="https://www.ithome.com/" target="_blank" rel="noopener">IT之家</a><br><a href="https://t.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩动态</a><br><a href="https://m.weibo.cn/" target="_blank" rel="noopener">新浪微博</a><br><a href="https://steamcommunity.com/id/tao-lol/home/" target="_blank" rel="noopener">Steam好友动态</a><br><a href="https://www.amazon.cn/Kindle电子书/b?ie=UTF8&node=116169071&ref_=nav_topnav_giftcert" target="_blank" rel="noopener">Kindle电子书</a><br><a href="https://www.oschina.net/news/industry" target="_blank" rel="noopener">开源中国资讯</a><br><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a><br><a href="https://github.com/" target="_blank" rel="noopener">Github</a><br><a href="https://dev.azure.com/tao-lol/" target="_blank" rel="noopener">Azure DevOps</a>  </p>
<h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><h2 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h2><p><a href="https://store.steampowered.com/" target="_blank" rel="noopener">Steam</a><br><a href="https://store.steampowered.com/account/registerkey" target="_blank" rel="noopener">在Steam上激活产品</a><br><a href="https://steamdb.info/" target="_blank" rel="noopener">SteamDB</a><br><a href="https://isthereanydeal.com/" target="_blank" rel="noopener">IsThereAnyDeal</a><br><a href="https://www.steamcardexchange.net/index.php?showcase" target="_blank" rel="noopener">Steam Card Exchange Showcase</a><br><a href="https://steam.design/" target="_blank" rel="noopener">Steam.Design</a><br><a href="https://steamsignature.com/" target="_blank" rel="noopener">Steam Signature</a><br><a href="https://github.com/JustArchiNET/ArchiSteamFarm" target="_blank" rel="noopener">ArchiSteamFarm</a>  </p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p><a href="https://osu.ppy.sh/" target="_blank" rel="noopener">OSU</a><br><a href="https://www.oldmanemu.net/" target="_blank" rel="noopener">OldmanEmu</a><br><a href="https://minecraft-zh.gamepedia.com/Minecraft_Wiki" target="_blank" rel="noopener">Minecraft Wiki</a><br><a href="https://terraria.gamepedia.com/Terraria_Wiki" target="_blank" rel="noopener">Terraria Wiki</a><br><a href="https://starbounder.org/Starbound_Wiki" target="_blank" rel="noopener">StarBound Wiki</a><br><a href="http://transformice.wikia.com/wiki/Transformice_Wiki" target="_blank" rel="noopener">Transformice Wiki</a><br><a href="https://wiki.52poke.com/" target="_blank" rel="noopener">神奇宝贝百科</a><br><a href="https://game8.jp/splatoon-2" target="_blank" rel="noopener">スプラトゥーン2攻略Wiki</a><br><a href="https://splatoonwiki.org/" target="_blank" rel="noopener">Splatoon Wiki</a><br><a href="https://www.ssbwiki.com/" target="_blank" rel="noopener">SmashWiki</a><br><a href="https://vstab.com/s/eso/" target="_blank" rel="noopener">上古卷轴Online中文网</a><br><a href="http://octopath.huijiwiki.com/wiki/首页" target="_blank" rel="noopener">八方旅人中文维基</a><br><a href="https://zh.stardewvalleywiki.com/Stardew_Valley_Wiki" target="_blank" rel="noopener">Stardew Valley 中文维基</a><br><a href="http://xinglugu.huijiwiki.com/wiki/首页" target="_blank" rel="noopener">星露谷物语中文维基 - 灰机Wiki</a><br><a href="https://majsoul.union-game.com/" target="_blank" rel="noopener">雀魂麻将</a><br><a href="https://zh.moegirl.org/雀魂麻将" target="_blank" rel="noopener">雀魂麻将 - 萌娘百科</a><br><a href="http://139.199.75.237/TTT/" target="_blank" rel="noopener">Tetris T-SPIN 教程</a><br><a href="http://farter.cn/tetr.js/" target="_blank" rel="noopener">Tetr.js</a><br><a href="https://zh.jstris.jezevec10.com/" target="_blank" rel="noopener">Jstris</a><br><a href="https://taiko.bui.pm/" target="_blank" rel="noopener">太鼓ウェブ</a><br><a href="https://www.ffxiv.cn/" target="_blank" rel="noopener">最终幻想14中文攻略站 素素</a><br><a href="https://ff14.huijiwiki.com/wiki/首页" target="_blank" rel="noopener">最终幻想14中文维基 灰机Wiki</a><br><a href="https://www.ffxivsc.cn/" target="_blank" rel="noopener">光之收藏家 - 最终幻想14幻化站</a><br><a href="https://www.mmgal.com/" target="_blank" rel="noopener">MyGalgame</a><br><a href="https://www.nintendo.co.jp/software/switch/" target="_blank" rel="noopener">Nintendo Switchソフトウェア｜任天堂</a><br><a href="https://www.nintendo.com/games/switch/" target="_blank" rel="noopener">Switch Games - Nintendo Game Store</a>  </p>
<h1 id="动漫影视"><a href="#动漫影视" class="headerlink" title="动漫影视"></a>动漫影视</h1><p><a href="https://www.equestriacn.com/" target="_blank" rel="noopener">小马中国 | EquestriaCN</a><br><a href="http://yuc.wiki/" target="_blank" rel="noopener">YuC’s AnimeList</a><br><a href="http://bangumi.tv/" target="_blank" rel="noopener">Bangumi 番组计划</a><br><a href="https://www.dmzj.com/" target="_blank" rel="noopener">动漫之家</a><br><a href="https://mangakakalot.com/page" target="_blank" rel="noopener">Mangakakalot</a><br><a href="http://www.zerobyw4.com/" target="_blank" rel="noopener">zero搬运网</a><br><a href="https://www.manhuadb.com/" target="_blank" rel="noopener">漫画DB</a><br><a href="https://www.acfun.cn/" target="_blank" rel="noopener">AcFun</a><br><a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a><br><a href="http://www.fjisu.tv/" target="_blank" rel="noopener">飞极速在线</a><br><a href="http://www.imomoe.io/" target="_blank" rel="noopener">樱花动漫</a><br><a href="www.dilidili.name/">嘀哩嘀哩</a><br><a href="https://mikanani.me/" target="_blank" rel="noopener">蜜柑计划</a><br><a href="https://gaoqing.fm/" target="_blank" rel="noopener">高清电台</a><br><a href="http://www.ttmeiju.me/" target="_blank" rel="noopener">天天美剧</a>  </p>
<h1 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h1><p><a href="https://antecer.gitee.io/amusingkeypad/" target="_blank" rel="noopener">AmusingKeypad</a><br><a href="http://www.52kindle.net/" target="_blank" rel="noopener">钱柜图书 Kindld特价书</a><br><a href="https://bookfere.com/" target="_blank" rel="noopener">书伴 Kindle伴侣</a><br><a href="http://www.pixvol.com/" target="_blank" rel="noopener">Kindle漫画</a><br><a href="https://www.sololearn.com/" target="_blank" rel="noopener">SoloLearn</a><br><a href="https://www.w3cschool.cn/" target="_blank" rel="noopener">W3Cschool</a><br><a href="http://www.mxroom.com/" target="_blank" rel="noopener">百度云资源</a><br><a href="http://www.kekenet.com/" target="_blank" rel="noopener">可可英语</a><br><a href="https://www.coolapk.com/" target="_blank" rel="noopener">酷安网</a><br><a href="https://www.wuxiaworld.com/" target="_blank" rel="noopener">WuXiaWorld</a><br><a href="https://studyspanish.com/" target="_blank" rel="noopener">StudySpanish</a><br><a href="https://bwh1.net/" target="_blank" rel="noopener">BandwagonHost</a><br><a href="https://shadowsky.world/" target="_blank" rel="noopener">ShadowSky</a><br><a href="http://www.xitie.com/" target="_blank" rel="noopener">西贴 网上商品历史价格</a><br><a href="https://homenew.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a><br><a href="https://console.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云控制台</a><br><a href="https://www.draw.io/" target="_blank" rel="noopener">draw.io</a><br><a href="https://www.urlgot.com/" target="_blank" rel="noopener">urlgot</a><br><a href="https://dillinger.io/" target="_blank" rel="noopener">Online Markdown Editor - Dillinger</a><br><a href="https://www.toolfk.com/" target="_blank" rel="noopener">TOOLFK - 程序员开发工具</a><br><a href="http://www.alltoall.net/" target="_blank" rel="noopener">在线格式转换 All2All</a><br><a href="http://www.chongdiantou.com/" target="_blank" rel="noopener">充电头网</a><br><a href="https://www.v2ray.com/" target="_blank" rel="noopener">V2Ray</a><br><a href="https://qxk.bnu.edu.cn/" target="_blank" rel="noopener">汉字全息资源应用系统</a><br><a href="https://www.appinn.com/" target="_blank" rel="noopener">小众软件</a><br><a href="https://www.10086.cn/" target="_blank" rel="noopener">中国移动</a><br><a href="https://www.189.cn/" target="_blank" rel="noopener">中国电信</a><br><a href="https://www.10010.com/" target="_blank" rel="noopener">中国联通</a><br><a href="https://www.amap.com/" target="_blank" rel="noopener">高德地图</a><br><a href="https://www.jd.com/" target="_blank" rel="noopener">京东</a><br><a href="https://www.taobao.com/" target="_blank" rel="noopener">淘宝</a><br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a><br><a href="https://www.google.com/" target="_blank" rel="noopener">Google</a><br><a href="https://todo.microsoft.com/" target="_blank" rel="noopener">Microsoft To-Do</a>  </p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 书签 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo下的Markdown语法]]></title>
      <url>/2019/08/30/MarkdownSyntax/</url>
      <content type="html"><![CDATA[<blockquote>
<p>转载自 <a href="https://www.ofind.cn/blog/HEXO/HEXO下的Markdown语法(GFM)写博客.html" target="_blank" rel="noopener">https://www.ofind.cn/blog/HEXO/HEXO下的Markdown语法(GFM)写博客.html</a> 并略微修改  </p>
</blockquote>
<h1 id="语法简明概述"><a href="#语法简明概述" class="headerlink" title="语法简明概述"></a>语法简明概述</h1><ol>
<li>分段 <code>两个回车</code></li>
<li>换行 <code>两个空格</code>+<code>回车</code></li>
<li>标题 <code>#</code>~<code>######</code>，<code>#</code>的个数表示几级标题，即表示一级标题到六级标题</li>
<li>强调 <code>**粗体**</code>，<code>__粗体__</code>，<code>*斜体*</code>，<code>_斜体_</code>，<code>***加粗斜体***</code>，<code>___加粗斜体___</code>，<code>~~删除线~~</code></li>
<li>引用 <code>&gt;</code> 注意后面紧跟个空格，<code>&gt;</code>的个数表示几级引用</li>
<li>表格 <code>-</code>和<code>|</code>分割行和列，<code>:</code>控制对齐方式</li>
<li>代码块 使用<code>```语言</code>代码内容<code>```</code></li>
<li>链接 <code>[文字](链接地址)</code></li>
<li>图片 <code>![图片说明](图片地址)</code>，地址可以是本地路径，也可以是网络地址</li>
<li>无序列表 <code>*</code>，<code>+</code>，<code>-</code>，选其中之一，注意后面紧跟个空格</li>
<li>有序列表 <code>1.</code>，<code>2.</code>，<code>3.</code>等，注意后面紧跟个空格</li>
<li>分隔线 <code>---</code>或<code>***</code>或<code>___</code>，<code>-</code>或<code>*</code>或<code>_</code>的个数三个或以上</li>
<li>半角空格<code>&amp;ensp;</code>或<code>&amp;#8194;</code></li>
<li>全角空格<code>&amp;emsp;</code>或<code>&amp;#8195;</code></li>
<li>不断行空格<code>&amp;nbsp;</code>或<code>&amp;#160;</code><a id="more"></a>

</li>
</ol>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">####### 没有七级标题，但会影响生成目录，目录行多出一行空行</span><br></pre></td></tr></table></figure>

<h1 id="内容强调"><a href="#内容强调" class="headerlink" title="内容强调"></a>内容强调</h1><h2 id="加粗、斜体"><a href="#加粗、斜体" class="headerlink" title="加粗、斜体"></a>加粗、斜体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字体 *斜体* 或 _斜体_ 显示</span><br><span class="line">字体 **加粗** 或 __加粗__ 显示</span><br><span class="line">字体 ***加粗斜体*** 或 ___加粗斜体___ 或以上任意两者组合 显示</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>斜体</em><br><strong>加粗</strong><br><strong><em>加粗斜体</em></strong>  </p>
</blockquote>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字体 ~~删除线~~ 显示</span><br></pre></td></tr></table></figure>

<blockquote>
<p><del>删除线</del>  </p>
</blockquote>
<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用&lt;code&gt;内容&lt;/code&gt;或`内容`来强调内容</span><br><span class="line">在code中需用\来转义符号`</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>强调内容</code>  </p>
</blockquote>
<h2 id="引用显示"><a href="#引用显示" class="headerlink" title="引用显示"></a>引用显示</h2><h3 id="标准使用"><a href="#标准使用" class="headerlink" title="标准使用"></a>标准使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每行都使用&gt;+空格+内容</span><br><span class="line">&gt; 引用内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用内容  </p>
</blockquote>
<h3 id="省略使用"><a href="#省略使用" class="headerlink" title="省略使用"></a>省略使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 仅第一行加&gt;号</span><br><span class="line">后续内容自动变成引用内容</span><br><span class="line">两个回车换行结束引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一行加<code>&gt;</code><br>第二行无<code>&gt;</code><br>第三行无<code>&gt;</code>  </p>
</blockquote>
<p>第四行无<code>&gt;</code>  </p>
<h3 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; 动物</span><br><span class="line">&gt;&gt; 水生动物</span><br><span class="line">&gt;&gt; 陆生动物</span><br><span class="line">&gt;&gt;&gt; 猴子</span><br><span class="line">&gt;&gt;&gt; 人</span><br><span class="line">&gt;&gt;&gt;&gt; 程序员</span><br><span class="line">&gt;&gt;&gt;&gt; 工程师</span><br><span class="line">&gt;&gt; 产品经理 <span class="comment">//没有空行间隔，忽略降级引用标记</span></span><br><span class="line">设计师 <span class="comment">//没有空行间隔，忽略降级引用标记</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; 两栖动物</span><br><span class="line">&gt;&gt;&gt; 鳄鱼</span><br></pre></td></tr></table></figure>

<blockquote>
<p>动物  </p>
<blockquote>
<p>水生动物<br>陆生动物  </p>
<blockquote>
<p>猴子<br>人  </p>
<blockquote>
<p>程序员<br>工程师<br>产品经理<br>设计师  </p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>两栖动物  </p>
<blockquote>
<p>鳄鱼  </p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表格语法：</span><br><span class="line"> 列1 | 列2 | 列3</span><br><span class="line"> --- | --- | --- </span><br><span class="line">第一行|  1  | 2 </span><br><span class="line">第二行|  2  | 3</span><br></pre></td></tr></table></figure>

<blockquote>
<table>
<thead>
<tr>
<th>列1</th>
<th>列2</th>
<th>列3</th>
</tr>
</thead>
<tbody><tr>
<td>第一行</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>第二行</td>
<td>2</td>
<td>3</td>
</tr>
</tbody></table>
</blockquote>
<p>使用冒号(:)来定义对齐方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|左对齐|右对齐|居中|</span><br><span class="line">|:---|---:|:-:|</span><br><span class="line">|一|1|①|</span><br><span class="line">|二|2|②|</span><br></pre></td></tr></table></figure>

<blockquote>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一</td>
<td align="right">1</td>
<td align="center">①</td>
</tr>
<tr>
<td align="left">二</td>
<td align="right">2</td>
<td align="center">②</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">代码块使用```[可选语言]开始，```结束，如：</span><br><span class="line">```cs</span><br><span class="line">public class Test</span><br><span class="line">&#123;</span><br><span class="line">    private string _pro;</span><br><span class="line">    public string Pro</span><br><span class="line">    &#123;</span><br><span class="line">        get =&gt; _pro;</span><br><span class="line">        set =&gt; _pro = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _pro;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Pro</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _pro;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pro = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特别提示"><a href="#特别提示" class="headerlink" title="特别提示"></a>特别提示</h2><p>如何在<code>代码块</code>中打出<code>```</code><br>只要使用4个<code>`</code>包含3个<code>`</code>即可，想表示更多，最外层<code>+1</code>就行。</p>
<h1 id="链接插入"><a href="#链接插入" class="headerlink" title="链接插入"></a>链接插入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[文字](链接)</span><br><span class="line">[首页](https://tao-lol.github.io)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://tao-lol.github.io" target="_blank" rel="noopener">首页</a>  </p>
</blockquote>
<h1 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](图片链接)</span><br><span class="line">图片链接相对路径或网络地址皆可</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="image-box">
                <img src="https://storebucket1-1258003678.cos.ap-guangzhou.myqcloud.com/Life%20Is%20Strange.jpg" alt="Life Is Strange" title class>
                <p>Life Is Strange</p>
            </figure>  
</blockquote>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*或-或+开头皆可</span><br><span class="line">* 无序列表1</span><br><span class="line">    * 无序列表1-1</span><br><span class="line">- 无序列表2</span><br><span class="line">+ 无序列表3</span><br><span class="line">    + 无序列表3-1</span><br><span class="line">    + 无序列表3-2</span><br><span class="line">        + 无序列表3-2-1</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>无序列表1<ul>
<li>无序列表1-1 <code>多于一级序列一(2?)个空格</code></li>
</ul>
</li>
</ul>
<ul>
<li>无序列表2</li>
</ul>
<ul>
<li>无序列表3<ul>
<li>无序列表3-1</li>
<li>无序列表3-2<ul>
<li>无序列表3-2-1</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">自动生成列表序号，最多两级</span><br><span class="line">1. 有序1</span><br><span class="line">1. 有序2</span><br><span class="line"> 1. 有序2-1</span><br><span class="line">  1. 有序2-1-1</span><br><span class="line"> 1. 有序2-2</span><br><span class="line">1. 有序3</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>有序1</li>
<li>有序2<ol>
<li>有序2-1 <code>多于一级序列一(3?)个空格</code><ol>
<li>有序2-1-1</li>
</ol>
</li>
<li>有序2-2</li>
</ol>
</li>
<li>有序3</li>
</ol>
</blockquote>
<h1 id="链接自动检测"><a href="#链接自动检测" class="headerlink" title="链接自动检测"></a>链接自动检测</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">百度：http://www.baidu.com/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>百度：<a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a>  </p>
</blockquote>
<h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三个或以上*或-或_</span><br><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure>

<blockquote>
<hr>
<hr>
<hr>
</blockquote>
<h1 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不断行空格 &amp;nbsp;</span><br><span class="line">半角空格 &amp;ensp;</span><br><span class="line">全角空格 &amp;emsp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个&nbsp;是&ensp;例&emsp;子</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/08/30/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
